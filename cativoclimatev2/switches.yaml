switch:
  - id: ${name}_${division_id_1}_valve
    platform: gpio
    name: "${division_1} Valve"
    restore_mode: RESTORE_DEFAULT_OFF
    pin:
      pcf8574: outputs
      number: 0
      mode: OUTPUT
      inverted: True
    icon: mdi:heating-coil
    web_server:
      sorting_group_id: sort_group_valves
  - id: ${name}_${division_id_2}_valve
    platform: gpio
    name: "${division_2} Valve"
    restore_mode: RESTORE_DEFAULT_OFF
    pin:
      pcf8574: outputs
      number: 1
      mode: OUTPUT
      inverted: True
    icon: mdi:heating-coil
    web_server:
      sorting_group_id: sort_group_valves
  - id: ${name}_${division_id_3}_valve
    platform: gpio
    name: "${division_3} Valve"
    restore_mode: RESTORE_DEFAULT_OFF
    pin:
      pcf8574: outputs
      number: 2
      mode: OUTPUT
      inverted: True
    icon: mdi:heating-coil
    web_server:
      sorting_group_id: sort_group_valves
  - id: ${name}_${division_id_4}_valve
    platform: gpio
    name: "${division_4} Valve"
    restore_mode: RESTORE_DEFAULT_OFF
    pin:
      pcf8574: outputs
      number: 3
      mode: OUTPUT
      inverted: True
    icon: mdi:heating-coil
    web_server:
      sorting_group_id: sort_group_valves
  - id: ${name}_heat_pump_switch
    platform: gpio
    name: "Heat Pump Switch"
    restore_mode: ALWAYS_OFF #Protects from reset
    pin:
      pcf8574: outputs
      number: 4
      mode: OUTPUT
      inverted: True
    device_class: switch
    icon: mdi:heat-pump
    web_server:
      sorting_group_id: sort_group_thermostats
    on_turn_on: 
      then:
        - switch.turn_on: ${name}_heat_pump_power # Runs everytime, so it keeps the sensors updated.
  - id: ${name}_heat_pump_cooling_mode
    platform: gpio
    name: "Heat Pump Cooling Mode"
    restore_mode: RESTORE_DEFAULT_OFF
    pin:
      pcf8574: outputs
      number: 5
      mode: OUTPUT
      inverted: True
    icon: mdi:sun-snowflake
    web_server:
      sorting_group_id: sort_group_settings

  - id: ${name}_heat_pump_power
    platform: template
    name: "Heatpump Power"
    device_class: outlet
    lambda: |-
      return id(${name}_heat_pump_has_power).state; // Must be like this to not generate too many http requests
    turn_on_action:
      - http_request.post:
          url: http://192.168.33.95/relay/0?turn=on
          capture_response: true
          on_response:
            then:
              - lambda: |-
                  json::parse_json(body, [](JsonObject root) -> bool {
                      id(${name}_heat_pump_has_power).publish_state(root["ison"]);
                      return true;
                  });
      - delay: 1s
      - script.execute: get_heat_pump_status
    turn_off_action:
      - http_request.post:
          url: http://192.168.33.95/relay/0?turn=off
          capture_response: true
          on_response:
            then:
              - lambda: |-
                  json::parse_json(body, [](JsonObject root) -> bool {
                      id(${name}_heat_pump_has_power).publish_state(root["ison"]);
                      return true;
                  });
      - delay: 1s
      - script.execute: get_heat_pump_status

  - platform: restart
    id: "${name}_restart"
    name: Restart
    web_server:
      sorting_group_id: sort_group_settings
